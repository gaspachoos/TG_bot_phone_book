import json
import telebot
from telebot import types


empty = True

API_TOKEN = '6969338848:AAEJI6ASfd633tWXQASWRfDmXSiSylDPrYg'
bot = telebot.TeleBot(API_TOKEN)


@bot.message_handler(commands=['start'])
def start_tg_bot(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —è —è–≤–ª—è—é—Å—å –∏–º–∏—Ç–∞—Ü–∏–µ–π <b>–¢–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏</b> üôÇ',parse_mode='html')
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å üìñ', callback_data='open')
    markup.row(btn1)
    bot.reply_to(message, '–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == 'open')
def open_menu(callback):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ü§ù', callback_data='add')
    btn3 = types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üëÄ', callback_data='show')
    markup.row(btn2, btn3)
    btn4 = types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ üîç', callback_data='find')
    btn5 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç üóë', callback_data='delete')
    markup.row(btn4, btn5)
    btn6 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç üë•', callback_data='change')
    btn7 = types.InlineKeyboardButton('–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é üö∂', callback_data='exit')
    markup.row(btn6, btn7)
    bot.send_message(callback.message.chat.id, '<b>–ú–µ–Ω—é:</b>', reply_markup=markup,parse_mode='html')

@bot.callback_query_handler(func=lambda callback: callback.data == 'show')
def show_contacts(callback):
    try:
        with open('users.json', 'r') as file:
            contacts = json.load(file)
        response = "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        for contact in contacts:
            response += f"–ò–º—è: {contact.get('user name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('user phone', '–ù–µ—Ç')}, Email: {contact.get('user email', '–ù–µ—Ç')} \n"
        bot.send_message(callback.message.chat.id, response, parse_mode='html')
    except (FileNotFoundError, json.JSONDecodeError):
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(callback.message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç:</b> ü•≤", reply_markup=markup,parse_mode='html')


@bot.callback_query_handler(func=lambda callback: callback.data == 'find')
def find_contact(callback):
    try:
        with open('users.json', 'r') as file:
            contacts = json.load(file)
        if contacts:
            bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
            bot.register_next_step_handler(callback.message, search_contacts)
        else:
            bot.send_message(callback.message.chat.id, "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç")
    except (FileNotFoundError, json.JSONDecodeError):
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(callback.message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç:</b> ü•≤", reply_markup=markup,parse_mode='html')

def search_contacts(message):
    user_input = message.text
    try:
        with open('users.json', 'r') as file:
            contacts = json.load(file)
        found_contacts = []
        for contact in contacts:
            if user_input in contact.get('user name', '') or \
               user_input in contact.get('user phone', '') or \
               user_input in contact.get('user email', ''):
                found_contacts.append(contact)
        if found_contacts:
            response = "\n".join([f"–ò–º—è: {contact['user name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {contact['user phone']},  Email: {contact['user email']}" for contact in found_contacts])
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open')
            markup.row(btn)
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"–ö–æ–Ω—Ç–∞–∫—Ç —Å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (FileNotFoundError, json.JSONDecodeError):
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> ü•≤", reply_markup=markup,parse_mode='html')        


@bot.callback_query_handler(func=lambda callback: callback.data == 'add')
def add_contact(callback):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn1, btn2)
    bot.send_message(callback.message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞? üßê", reply_markup=markup)
    bot.register_next_step_handler(callback.message, process_name_answer, {})

def process_name_answer(message, user_info):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        bot.register_next_step_handler(message, process_phone_answer, user_info)
    elif message.text == "–ù–µ—Ç":
        user_info["user name"] = "–ü—É—Å—Ç–æ"
        process_phone_answer(message, user_info)
    else:
        markup = types.InlineKeyboardMarkup()
        ttt = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ! üò§', callback_data='open')
        markup.row(ttt)
        bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ü§å</b>', reply_markup=markup,parse_mode='html')
        bot.register_next_step_handler(message, process_name_answer, user_info)

def process_phone_answer(message, user_info):
    if message.text != "–ù–µ—Ç":
        user_info["user name"] = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞? üßê", reply_markup=markup)
    bot.register_next_step_handler(message, process_phone_input, user_info)

def process_phone_input(message, user_info):
    if message.text == "–î–∞":
        user_info["user phone"] = []
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        bot.register_next_step_handler(message, process_phone_save, user_info)
    elif message.text == "–ù–µ—Ç":
        user_info["user phone"] = "–ü—É—Å—Ç–æ"
        process_email_answer(message, user_info)
    else:
        markup = types.InlineKeyboardMarkup()
        jjj = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ! üò§', callback_data='open')
        markup.row(jjj)
        bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ü§å</b>', reply_markup=markup,parse_mode='html')        
        bot.register_next_step_handler(message, process_phone_input, user_info)

def process_phone_save(message, user_info):
    user_info["user phone"].append(message.text)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞? üßê", reply_markup=markup)
    bot.register_next_step_handler(message, process_additional_phone, user_info)

def process_additional_phone(message, user_info):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        bot.register_next_step_handler(message, process_phone_save, user_info)
    elif message.text == "–ù–µ—Ç":
        process_email_answer(message, user_info)
    else:
        markup = types.InlineKeyboardMarkup()
        vvv = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ! üò§', callback_data='open')
        markup.row(vvv)
        bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ü§å</b>', reply_markup=markup,parse_mode='html')
        bot.register_next_step_handler(message, process_additional_phone, user_info)

def process_email_answer(message, user_info):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å email –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞? üßê", reply_markup=markup)
    bot.register_next_step_handler(message, process_email_save, user_info)

def process_email_save(message, user_info):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        bot.register_next_step_handler(message, save_contact, user_info)
    elif message.text == "–ù–µ—Ç":
        user_info["user email"] = "–ü—É—Å—Ç–æ"
        save_contact(message, user_info)
    else:
        markup = types.InlineKeyboardMarkup()
        zzz = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ! üò§', callback_data='open')
        markup.row(zzz)
        bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ü§å</b>', reply_markup=markup,parse_mode='html')   
        bot.register_next_step_handler(message, process_email_save, user_info)

def save_contact(message, user_info):
    if message.text != "–ù–µ—Ç":
        user_info["user email"] = message.text
    try:
        with open("users.json", "r") as file:
            data = json.load(file)
    except (FileNotFoundError,json.JSONDecodeError):
        data = []
    data.append(user_info)
    with open("users.json", "w") as file:
        json.dump(data, file, indent=4,ensure_ascii=False)
    markup = types.InlineKeyboardMarkup()
    mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
    markup.row(mmm)
    bot.send_message(message.chat.id, '<b>–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úçÔ∏è.</b>', reply_markup=markup,parse_mode='html')


@bot.callback_query_handler(func=lambda callback: callback.data == 'delete')
def porcces_delete_user(callback):
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
                contacts = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        contacts = [] 
    if not contacts:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(callback.message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç: ü•≤</b>', reply_markup=markup,parse_mode='html')
    else:    
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:üßê ")
        bot.register_next_step_handler(callback.message, delete_contact)

def delete_contact(message):
    search_query = message.text.lower()
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
            contacts = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        contacts = []
    
    found_contacts = []
    indexes_to_modify = []
    for i, contact in enumerate(contacts):
        if search_query in str(contact.get('user name', '')).lower():
            found_contacts.append(contact)
            indexes_to_modify.append(i)
    
    if found_contacts:
        for i, contact in enumerate(found_contacts, 1):
            bot.send_message(message.chat.id, f"{i}. {contact}")

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:üßê")
        bot.register_next_step_handler(message, lambda m: delete_selected_contact(m, indexes_to_modify, contacts))
    else:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.üßê</b>', reply_markup=markup,parse_mode='html')
        
def delete_selected_contact(message, indexes_to_modify, contacts):
    try:
        index = int(message.text) - 1
        if index in range(len(indexes_to_modify)):
            del contacts[indexes_to_modify[index]]
            with open('users.json', 'w', encoding='utf-8') as file:
                json.dump(contacts, file, ensure_ascii=False, indent=4)
                
            markup = types.InlineKeyboardMarkup()
            mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
            markup.row(mmm)
            bot.send_message(message.chat.id, '<b>–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.‚ö∞Ô∏è</b>', reply_markup=markup,parse_mode='html')
        else:      
            markup = types.InlineKeyboardMarkup()
            mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
            markup.row(mmm)
            bot.send_message(message.chat.id, '<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞.üòë</b>', reply_markup=markup,parse_mode='html')
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞.üòë</b>', reply_markup=markup,parse_mode='html')

def load_contacts():
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
            contacts = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        contacts = []
    return contacts


@bot.callback_query_handler(func=lambda callback: callback.data == 'change')
def porcces_change_user(callback):
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
                contacts = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        contacts = [] 
    if not contacts:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(callback.message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç: ü•≤</b>', reply_markup=markup,parse_mode='html')
        
    else:    
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:üßê ")
        bot.register_next_step_handler(callback.message, change_contact)

def change_contact(message):
    search_query = message.text.lower()
    contacts = load_contacts()
    if not contacts:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç: ü•≤</b>', reply_markup=markup,parse_mode='html')
        return

    found_contacts = []
    for i, contact in enumerate(contacts):
        if search_query in str(contact.get('user name', '')).lower():
            found_contacts.append((i, contact))

    if found_contacts:
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        for i, contact in enumerate(found_contacts, 1):
            response_text += f"{i}. name: {contact[1]['user name']}, phone: {contact[1]['user phone']}, email: {contact[1]['user email']}\n"
        bot.send_message(message.chat.id, response_text)

        bot.register_next_step_handler(message, handle_contact_selection, found_contacts)
    else:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ü•≤</b>', reply_markup=markup,parse_mode='html')

def handle_contact_selection(message, found_contacts):
    if not found_contacts:
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ü•≤</b>', reply_markup=markup,parse_mode='html')

        return

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(found_contacts):
            markup = types.InlineKeyboardMarkup()
            mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
            markup.row(mmm)
            bot.send_message(message.chat.id, '<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞: üòë</b>', reply_markup=markup,parse_mode='html')
            bot.register_next_step_handler(message, handle_contact_selection, found_contacts)
            return
        selected_contact = found_contacts[selected_index][1]
        selected_index = found_contacts[selected_index][0]
    except (IndexError, ValueError):
        markup = types.InlineKeyboardMarkup()
        mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
        markup.row(mmm)
        bot.send_message(message.chat.id, '<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: üòë</b>', reply_markup=markup,parse_mode='html')
        bot.register_next_step_handler(message, handle_contact_selection, found_contacts)
        return

    bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {selected_contact['user name']}, {selected_contact['user phone']}, {selected_contact['user email']}")
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    
    btn11 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    btn22 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    btn33 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å email")
    markup.add(btn11)
    markup.add(btn22)
    markup.add(btn33)
    
    bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>', reply_markup=markup,parse_mode='html')
    bot.register_next_step_handler(message, user_choice, selected_contact, selected_index)


def user_choice(message, selected_contact, selected_index):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, update_name, selected_contact, selected_index)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        bot.register_next_step_handler(message, update_phone, selected_contact, selected_index)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å email":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        bot.register_next_step_handler(message, update_email, selected_contact, selected_index)


def update_name(message, selected_contact, selected_index):
    new_name = message.text.strip()
    selected_contact['user name'] = new_name
    update_contacts(selected_index, selected_contact)
    markup = types.InlineKeyboardMarkup()
    mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
    markup.row(mmm)
    bot.send_message(message.chat.id, f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name} ‚úÖ", reply_markup=markup,parse_mode='html')


def update_phone(message, selected_contact, selected_index):
    new_phone = message.text.strip()
    selected_contact['user phone'] = new_phone
    update_contacts(selected_index, selected_contact)
    markup = types.InlineKeyboardMarkup()
    mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
    markup.row(mmm)
    bot.send_message(message.chat.id, f"–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_phone} ‚úÖ", reply_markup=markup,parse_mode='html')


def update_email(message, selected_contact, selected_index):
    new_email = message.text.strip()
    selected_contact['user email'] = new_email
    update_contacts(selected_index, selected_contact)
    markup = types.InlineKeyboardMarkup()
    mmm = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', callback_data='open')
    markup.row(mmm)
    bot.send_message(message.chat.id, f"Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_email} ‚úÖ", reply_markup=markup,parse_mode='html')


def update_contacts(index, new_contact):
    with open('users.json', 'r', encoding='utf-8') as file:
        contacts = json.load(file)
    contacts[index] = new_contact
    with open('users.json', 'w', encoding='utf-8') as file:
        json.dump(contacts, file, ensure_ascii=False, indent=4)
    
    contacts.append(new_contact)

@bot.callback_query_handler(func=lambda callback: callback.data == 'exit')
def handle_exit_button(callback):
    bot.send_message(callback.message.chat.id, f'{callback.from_user.first_name}, –Ω–∞–¥–µ—é—Å—å –≤–∞–º –±—ã–ª–æ —á—É—Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–π <b>–¢–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏</b>, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å üôÇ', parse_mode='html')
    bot.send_message(callback.message.chat.id, "‚ù§Ô∏è")

bot.polling()
